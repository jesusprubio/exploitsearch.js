const test = require('tape');
const lodash = require('lodash');

const ExploitSearch = require('../');


console.log('\n-> "search"');

test('Should return empty array for an inexistent service.', (tst) => {
  const client = new ExploitSearch({});

  tst.plan(1);

  client.search('nonExistentService', (err, res) => {
    if (err) {
      tst.error(err);

      return;
    }

    tst.equal(res.length, 0);
  });
});


const apiLimit = 100;
test(
  'Should return the API ' + apiLimit + ' (limit) for a deeply used service.',
  (tst) => {
    const client = new ExploitSearch({});

    tst.plan(2);

    client.search('apache', (err, res) => {
      if (err) {
        tst.error(err);

        return;
      }

      tst.equal(res.length, 100);
      tst.comment('Should have the correct structure (each result).');
      // We check only one to KISS.
      tst.deepEqual(Object.keys(res[0]), [
        'name', 'src', 'id', 'info', 'exploits',
        'refs', 'tools', 'links', 'dates',
      ]);
    });
  }
);


test(
  'should only return exploits if desired',
  (tst) => {
    const client = new ExploitSearch({
      exploits: true,
    });

    tst.plan(1);

    client.search('apache', (err, res) => {
      if (err) {
        tst.error(err);

        return;
      }

      const checkValue = lodash.some(res, (entry) => {
        return entry.exploits.length === 0;
      });

      tst.equal(checkValue, false);
    });
  }
);
