/*
  Copyright Jesus Perez <jesusprubio gmail com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

'use strict';

const test = require('tap').test;
const lodash = require('lodash');

const search = require('../');


test('should return empty array for an inexistent service. (callback)', assert => {
  assert.plan(1);

  search('nonExistentService', {}, (err, res) => assert.equal(res.length, 0));
});


test('should return empty array for an inexistent service. (promise)', assert => {
  assert.plan(1);

  return search('nonExistentService', {})
  .then(res => assert.equal(res.length, 0));
});


test('should return the API (limit) for a deeply used service. (callback)', assert => {
  assert.plan(2);

  search('apache', {}, (err, res) => {
    assert.equal(res.length, 100);
    // We check only one to KISS.
    assert.deepEqual(Object.keys(res[0]), [
      'name', 'src', 'id', 'info', 'exploits',
      'refs', 'tools', 'links', 'dates',
    ]);
  });
});


test('should return the API (limit) for a deeply used service. (promise)', assert => {
  assert.plan(2);

  search('apache', {})
  .then(res => {
    assert.equal(res.length, 100);
    // We check only one to KISS.
    assert.deepEqual(Object.keys(res[0]), [
      'name', 'src', 'id', 'info', 'exploits',
      'refs', 'tools', 'links', 'dates',
    ]);
  });
});


test('should only return exploits if desired (callback)', assert => {
  assert.plan(1);

  search('apache', { exploits: true }, (err, res) => {
    const checkValue = lodash.some(res, (entry) => (entry.exploits.length === 0));

    assert.equal(checkValue, false);
  });
});


test('should only return exploits if desired (promise)', assert => {
  assert.plan(1);

  search('apache', { exploits: true })
  .then(res => {
    const checkValue = lodash.some(res, (entry) => (entry.exploits.length === 0));

    assert.equal(checkValue, false);
  });
});


test('should fail with no "query" (callback)', assert => {
  assert.plan(1);

  search(null, {}, err => assert.equal(err.message, 'Required parameter: "query"'));
});


test('should fail with no "query" (promise)', assert => {
  assert.plan(1);

  search()
  .then(() => assert.fail('should fail.'))
  .catch(err => assert.equal(err.message, 'Required parameter: "query"'));
});
