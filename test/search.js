/*
  Copyright Jesús Pérez <jesusprubio@gmail.com>

  This code may only be used under the MIT license found at
  https://opensource.org/licenses/MIT.
*/

'use strict';

const test = require('tap').test;
const lodash = require('lodash');

const search = require('../');


test('should return empty array for an inexistent service. (callback)', assert => {
  assert.plan(1);

  search('nonExistentService', {}, (err, res) => assert.equal(res.length, 0));
});


test('should return empty array for an inexistent service. (promise)', assert => {
  assert.plan(1);

  search('nonExistentService', {})
  .then(res => assert.equal(res.length, 0));
});


test('should return the API (limit) for a deeply used service. (callback)', assert => {
  assert.plan(2);

  search('apache', {}, (err, res) => {
    assert.equal(res.length, 100);
    // We check only one to KISS.
    assert.deepEqual(Object.keys(res[0]), [
      'name', 'src', 'id', 'info', 'exploits',
      'refs', 'tools', 'links', 'dates',
    ]);
  });
});


test('should return the API (limit) for a deeply used service. (promise)', assert => {
  assert.plan(2);

  search('apache', {})
  .then(res => {
    assert.equal(res.length, 100);
    // We check only one to KISS.
    assert.deepEqual(Object.keys(res[0]), [
      'name', 'src', 'id', 'info', 'exploits',
      'refs', 'tools', 'links', 'dates',
    ]);
  });
});


test('should only return exploits if desired (callback)', assert => {
  assert.plan(1);

  search('apache', { exploits: true }, (err, res) => {
    const checkValue = lodash.some(res, (entry) => (entry.exploits.length === 0));

    assert.equal(checkValue, false);
  });
});


test('should only return exploits if desired (promise)', assert => {
  assert.plan(1);

  search('apache', { exploits: true })
  .then(res => {
    const checkValue = lodash.some(res, (entry) => (entry.exploits.length === 0));

    assert.equal(checkValue, false);
  });
});


test('should fail with no "query" (callback)', assert => {
  assert.plan(1);

  search(null, {}, err => assert.equal(err.message, 'Required parameter: "query"'));
});


test('should fail with no "query" (promise)', assert => {
  assert.plan(1);

  search()
  .then(() => assert.fail('should fail.'))
  .catch(err => assert.equal(err.message, 'Required parameter: "query"'));
});
